* 멀티테넌시
  - 그 용어에서 유추할 수 있듯 여러 테넌트(tenant, 사용자)를 가진 아키텍처라는 의미
  - __하나의 시스템과 소프트웨어를 여러 사용자가 공유하는 구조__
    + __하나의 Software Instance 가 하나의 서버 위에서 여러 개의 Tenant 를 서비스 한다는 의미__
  - 많은 사람이 같은 기능을 사용하는 웹메일 서비스가 대표적인 멀티테넌시 아키텍처 소프트웨어
  - 중요한 것은 각 사용자가 독립적으로 이용할 수 있어야 한다는 점

* 장점
  - 비용 절감
  - 데이터 통합이 쉽다

* 단점
  - 개인화를 지원하기 위해서는 더 정교한 멀티테턴시 아키텍처를 적용해야 하는데 이를 개발하는 입장에서는 상당한 비용과 인력이 필요
  - 업데이트 과정에서 자칫 버그나 장애가 발생하면, 모든 사용자가 공통으로 장애를 겪을 수 있음 
  - 일부 사용자에게 유용한 업데이트가 다른 사용자에게는 오히려 불편함을 유발
  - 보안 문제
    + 외부적으로는 사용자별로 다른 것처럼 보인다고 해도 결국 멀티테넌시 아키텍처 내부적으로는 단일 데이터베이스에 다양한 사용자의 데이터가 공존
       * 사용자별 데이터가 섞이지 않도록해야 함
       * 해킹이 발생시, 모든 사용자의 데이터가 유출되지 않도록 해야함

---
*  테넌트
  - 소프트웨어 인스턴스에 대해 공통이 되는 특정 접근 권한을 공유하는 __사용자__들

* 멀티 테넌트 구조에서 Software 들은 모든 테넌트들에 대해 인스턴스의 일부분을 단독적으로 제공하기 위하여 설계되어 있음
